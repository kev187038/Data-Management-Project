--------------------UNFAIR COMPARISON--------------------------------------------

Average Synonym/Antonyms/Hypernyms/Hyponyms per word: Calculate average number of Synonyms/Antonyms/Hypernyms/Hyponyms per word:
RELATIONAL QUERY 

with Countsyn as (select count(synonym) c, words.word, words.type
from issynonym right join words on (words.word=issynonym.word and words.type = issynonym.type_word)
group by words.word, words.type)

select avg(c) from Countsyn


1500 msec circa for Synonyms, 452 msec for antonyms, 1190 msec for hypernym

results: 
	synonym avg is 2.46
	antonym average is 0.13 
	Hypernym/Hyponym average is 1.96

We need to right join on words to factor in those words that do not have a synonym/antonym/hypernym

GRAPH QUERY

MATCH (w:Word)
OPTIONAL MATCH (w)-[:IsSynonym]->(s:Word) 
WITH w, (COUNT(s)) AS c
RETURN avg(c)

synonym 514 msec
antonyms 300 msec
hypernyms 500 msec

--------------------------- Words with synonyms words per count
relational 2000 msec, graph 859 msec

RELATIONAL QUERY

with countsyn as (select count(synonym) as c, words.word, words.type, words.sentiment
from issynonym right join words on words.word = issynonym.word and words.type = issynonym.type_word
group by words.word, words.type, words.sentiment)

select avg(sentiment), c
from countsyn
group by c

500msec circa

GRAPH QUERY

match (n) optional match (n)-[r:IsSynonym]->(m)
with n.sentiment as sentiment, count(r) as numSyn, n
return avg(sentiment), numSyn

1000 msec circa


---------------------Hypernyms depth 3 without sentiment

RELATIONAL QUERY
7:46 minutes
with hypernyms_till_depth_three as (
select h1.hypernym, h1.type_hypernym, h1.hyponym, h1.type_hyponym
from ishypernym h1
union 
select h1.hypernym, h1.type_hypernym, h2.hyponym, h2.type_hyponym
from ishypernym h1 
      join ishypernym h2 
      on h1.hyponym = h2.hypernym and h1.type_hyponym = h2.type_hypernym
union 
select h1.hypernym, h1.type_hypernym, h3.hyponym, h3.type_hyponym
from ishypernym h1 
     join ishypernym h2 
     on h1.hyponym = h2.hypernym and h1.type_hyponym = h2.type_hypernym 
     join ishypernym h3
     on h2.hyponym = h3.hypernym and h2.type_hyponym = h3.type_hypernym 
)

select hypernym, type_hypernym, count(distinct(hyponym, type_hyponym))
from hypernyms_till_depth_three
group by hypernym, type_hypernym
order by count desc

GRAPH QUERY
16.4 sec

MATCH (w:Word)-[:IsHypernym*1..3]->(s:Word) 
WITH (COUNT(DISTINCT s)) AS c, w
ORDER BY c DESC
RETURN w, c 

-----------------------------Hypernym sentiment evolution with path depth 3 to get the average sentiment of hyponyms compared to the respective hypernym
GRAPH 28.83 seconds

RELATIONAL QUERY
with hypernyms_till_depth_three as (
select h1.hypernym, h1.type_hypernym, h1.hyponym, h1.type_hyponym
from ishypernym h1
union 
select h1.hypernym, h1.type_hypernym, h2.hyponym, h2.type_hyponym
from ishypernym h1 
      join ishypernym h2 
      on h1.hyponym = h2.hypernym and h1.type_hyponym = h2.type_hypernym
union 
select h1.hypernym, h1.type_hypernym, h3.hyponym, h3.type_hyponym
from ishypernym h1 
     join ishypernym h2 
     on h1.hyponym = h2.hypernym and h1.type_hyponym = h2.type_hypernym 
     join ishypernym h3
     on h2.hyponym = h3.hypernym and h2.type_hyponym = h3.type_hypernym 
)
select hyper.word, hyper.type, hyper.sentiment, avg(hypon.sentiment)
from words hyper join hypernyms_till_depth_three h1
     on hyper.word = h1.hypernym and hyper.type = h1.type_hypernym
     join words hypon 
     on hypon.word = h1.hyponym and hypon.type = h1.type_hyponym
where (hyper.word, hyper.type) in (select hypernym, type_hypernym
                                   from (select hypernym, type_hypernym, count((hyponym, type_hyponym)) as c
                                         from hypernyms_till_depth_three
                                         group by hypernym, type_hypernym) as counter
                                   where c > 20000)
group by hyper.word, hyper.type, hyper.sentiment

GRAPH QUERY

MATCH (w)-[:IsHypernym*1..3]->(s)
WITH w, COUNT(DISTINCT s) as c
WHERE c > 20000
MATCH (w)-[:IsHypernym*1..3]->(s)
WITH w, COLLECT(DISTINCT s) as unique_s
UNWIND unique_s AS s
RETURN w, AVG(s.sentiment)

----------------------------------Antonyms with max sentiment difference and take the synonyms of this antonyms such that the sentiment difference between these differences is minimal 
and greater than zero (between the sentiments of the two antonyms separated). 
We look for the "political words" defined as: two political words p1 and p2 are such if they are synonyms of antynoms a1 and a2 where a1 is antonym of a2 and the difference of 
sentiment between p1 and p2 is minimal throughout all possible such synonyms. 

RELATIONAL QUERY

with distant_antonyms as (
select w1.word word, w1.type type_word, w2.word antonym, w2.type type_antonym
from words w1 join isantonym a
     on w1.word = a.word and w1.type = a.type_word
     join words w2
     on w2.word = a.antonym and w2.type = a.type_antonym
where w1.sentiment - w2.sentiment > 1
), political_pairs as (
select pol1.word pol1, pol1.type type_pol1, pol1.sentiment sent_pol1,
      distant_antonyms.word ant1, distant_antonyms.type_word type_ant1,
      distant_antonyms.antonym ant2, distant_antonyms.type_antonym type_ant2,
      pol2.word pol2, pol2.type type_pol2, pol2.sentiment sent_pol2
from words pol1 join issynonym s1 on
     pol1.word = s1.word and pol1.type = s1.type_word
     join distant_antonyms 
     on s1.synonym = distant_antonyms.word and s1.type_synonym = distant_antonyms.type_word
     join issynonym s2
     on distant_antonyms.antonym = s2.synonym and distant_antonyms.type_antonym = s2.type_synonym
     join words pol2 
     on pol2.word = s2.word and pol2.type = s2.type_word
-- maybe here there should be a where clause
-- where abs(pol1.sentiment - pol2.sentiment) > 0
)
select pol1, type_pol1, pol2, type_pol2, ant1, type_ant1, ant2, type_ant2, abs(sent_pol1 - sent_pol2) as difference
from political_pairs as pp
where abs(sent_pol1 - sent_pol2) <= all(select abs(sent_pol1 - sent_pol2)
							from political_pairs as pp2
							where pp.ant1 = pp2.ant1 and pp.type_ant1 = pp2.type_ant1 and pp.ant2 = pp2.ant2 
									and pp.type_ant2 = pp2.type_ant2
							) and abs(sent_pol1 - sent_pol2) > 0

GRAPH QUERY

PREPARATION:
MATCH (w)-[:IsAntonym]->(s)
WHERE w.sentiment - s.sentiment > 1
RETURN w, s, (w.sentiment - s.sentiment) as difference
ORDER BY difference desc


MATCH (ant1)-[:IsAntonym]->(ant2)
WHERE ant1.sentiment - ant2.sentiment > 1
MATCH (pol1)-[:IsSynonym]->(ant1)-[:IsAntonym]->(ant2)<-[:IsSynonym]-(pol2)
WITH ant1, ant2, COLLECT({pol1: pol1, pol2: pol2}) AS political_pairs
WITH ant1, ant2, REDUCE(minDiff = [head(political_pairs)], diff IN tail(political_pairs) |
    CASE 
        WHEN abs(diff.pol1.sentiment - diff.pol2.sentiment) < abs(minDiff[0].pol1.sentiment - minDiff[0].pol2.sentiment) THEN [diff]
        WHEN abs(diff.pol1.sentiment - diff.pol2.sentiment) = abs(minDiff[0].pol1.sentiment - minDiff[0].pol2.sentiment) THEN minDiff + [diff]
        ELSE minDiff 
    END) AS minDifference
UNWIND minDifference AS minDiff
RETURN minDiff.pol1.word, minDiff.pol2.word, ant1.word, ant2.word, round(abs(minDiff.pol1.sentiment - minDiff.pol2.sentiment),5) AS difference
ORDER BY difference

####################################################
Clustering coefficient of a node, the node with the most number of synonyms

GRAPH

Match (w:Word {word: "get", type: "verb"})-[r:IsSynonym]->(s:Word)
with w, count(r) as num_syn 

match (w)-[:IsSynonym]->(s:Word)-[t:IsSynonym]->(f:Word)-[:IsSynonym]->(w)
with w, count(t) as num_edges, num_syn
return  w, toFloat(num_edges)/(num_syn*num_syn) 

SQL
with countSyn as (select word, type_word, count((synonym, type_synonym)) as numSyn
from issynonym s1 
where word = 'get' and type_word='verb'
group by word, type_word)

select s1.word, s1.type_word, countsyn.numsyn, count((s2.word, s2.type_word)) as numSynOfSyn,
	cast(count((s2.word, s2.type_word)) as float)/(countsyn.numsyn*countsyn.numsyn)
from countsyn join issynonym s1 on countsyn.word = s1.word and countsyn.type_word = s1.type_word 
join issynonym s2 on s2.word = s1.synonym and s2.type_word = s1.type_synonym 
where (s2.synonym, s2.type_synonym) in (select synonym, type_synonym
					from issynonym
					where word = 'get' and type_word = 'verb')
group by s1.word, s1.type_word, countsyn.numsyn

300 msec





###ON ALL NODES

Match (w)-[r:IsSynonym]->(s:Word)
with w, count(r) as num_syn 
match (w)-[:IsSynonym]->(s:Word)-[t:IsSynonym]->(f:Word)-[:IsSynonym]->(w)
with w, count(t) as num_edges, num_syn
return  w, toFloat(num_edges)/(num_syn*num_syn) as cluster_coefficient
order by cluster_coefficient desc


#Col terzo join va nettamente piÃ¹ veloce!

with countSyn as (select word, type_word, count((synonym, type_synonym)) as numSyn
from issynonym s1 
group by word, type_word)

select s1.word, s1.type_word, countsyn.numsyn, count((s2.word, s2.type_word)) as numSynOfSyn,
	cast(count((s2.word, s2.type_word)) as float)/(countsyn.numsyn*countsyn.numsyn) as clusterCoefficient
from countsyn join issynonym s1 on countsyn.word = s1.word and countsyn.type_word = s1.type_word 
join issynonym s2 on s2.word = s1.synonym and s2.type_word = s1.type_synonym
join issynonym s3 on s3.word = s2.synonym and s3.type_word = s2.type_synonym
and s3.synonym = s1.word and s3.type_synonym = s1.type_word
group by s1.word, s1.type_word, countsyn.numsyn
order by clusterCoefficient desc

####### AVERAGE CLUSTERING COEFFICIENT

graph cc = 0.5458799

GRAPH
 
Match (w)-[r:IsSynonym]->(s:Word)
with w, count(r) as num_syn 
match (w)-[:IsSynonym]->(s:Word)-[t:IsSynonym]->(f:Word)-[:IsSynonym]->(w)
with w, count(t) as num_edges, num_syn
with  w, toFloat(num_edges)/(num_syn*num_syn) as cluster_coefficient
return avg(cluster_coefficient)

time = 5,61 sec

SQL

with countSyn as (select word, type_word, count((synonym, type_synonym)) as numSyn
from issynonym s1 
group by word, type_word),


clustering_coefficients as (select s1.word, s1.type_word, countsyn.numsyn,
	cast(count((s2.word, s2.type_word)) as float)/(countsyn.numsyn*countsyn.numsyn) as clusterCoefficient
from countsyn join issynonym s1 on countsyn.word = s1.word and countsyn.type_word = s1.type_word 
join issynonym s2 on s2.word = s1.synonym and s2.type_word = s1.type_synonym
join issynonym s3 on s3.word = s2.synonym and s3.type_word = s2.type_synonym
and s3.synonym = s1.word and s3.type_synonym = s1.type_word
group by s1.word, s1.type_word, countsyn.numsyn)

select avg(clusterCoefficient) as Average_CC
from clustering_coefficients as cc

time = 12,69 sec

######################## Similarity percentages between sentiment and synonyms 

The average percentage of similar sentiments for synonym relationships is 0.785 for a threshold value of 0.1 in sentiment difference
The average percentage of similar sentiments for synonym relationships is 0.686 for a threshold value of 0.01 in sentiment difference


Relational  time ~= 3.8 sec

with countSyn as (select count((synonym, type_synonym)) as count_tot, words.word as word, words.type as type
from words join issynonym on words.word = issynonym.word and words.type = issynonym.type_word
group by words.word, words.type
),


countSent as ( select w1.word as word, w1.type as type, count((w2.word, w2.type)) as countSent
from words w1 join issynonym s1 on w1.word = s1.word and w1.type = s1.type_word join words w2 on w2.word = s1.synonym and
w2.type = s1.type_synonym 
where abs(w1.sentiment - w2.sentiment) < 0.1
group by (w1.word, w1.type)
union
select w1.word as word, w1.type as type, 0 as countSent
from words w1 join issynonym s1 on w1.word = s1.word and w1.type = s1.type_word join words w2 on w2.word = s1.synonym and
w2.type = s1.type_synonym 
where (w1.word, w1.type) not in (select w1.word as word, w1.type as type
	from words w1 join issynonym s1 on w1.word = s1.word and w1.type = s1.type_word join words w2 on w2.word = s1.synonym and
	w2.type = s1.type_synonym 
	where abs(w1.sentiment - w2.sentiment) < 0.1
	) 
),

results as (select csyn.word, csyn.type, (cast(csen.countSent as float)/csyn.count_tot) as percentage
from countSyn csyn join countsent csen on csyn.word = csen.word and csyn.type = csen.type)

select avg(percentage) as Average_percentage
from results

GRAPH

MATCH (n)
OPTIONAL MATCH (n)-[:IsSynonym]->(m)
WHERE ABS(n.sentiment - m.sentiment) < 0.1
WITH n, COUNT(m) AS similar_synonyms
MATCH (n)-[:IsSynonym]->(m)
WITH n, similar_synonyms, toFloat(similar_synonyms)/COUNT(m) AS similarity
RETURN AVG(similarity)

time ~= 1.1 sec


